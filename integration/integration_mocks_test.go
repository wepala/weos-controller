// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package integration_test

import (
	"github.com/labstack/echo/v4"
	"github.com/wepala/weos-controller"
	"sync"
)

// Ensure, that TestAPIMock does implement TestAPI.
// If this is not the case, regenerate this file with moq.
var _ TestAPI = &TestAPIMock{}

// TestAPIMock is a mock implementation of TestAPI.
//
// 	func TestSomethingThatUsesTestAPI(t *testing.T) {
//
// 		// make and configure a mocked TestAPI
// 		mockedTestAPI := &TestAPIMock{
// 			AddConfigFunc: func(config *APIConfig) error {
// 				panic("mock out the AddConfig method")
// 			},
// 			AddPathConfigFunc: func(path string, config *weoscontroller.PathConfig) error {
// 				panic("mock out the AddPathConfig method")
// 			},
// 			ContextFunc: func(handlerFunc echo.HandlerFunc) echo.HandlerFunc {
// 				panic("mock out the Context method")
// 			},
// 			EchoInstanceFunc: func() *echo.Echo {
// 				panic("mock out the EchoInstance method")
// 			},
// 			FooBarFunc: func(c echo.Context) error {
// 				panic("mock out the FooBar method")
// 			},
// 			GlobalMiddlewareFunc: func(handlerFunc echo.HandlerFunc) echo.HandlerFunc {
// 				panic("mock out the GlobalMiddleware method")
// 			},
// 			HelloWorldFunc: func(c echo.Context) error {
// 				panic("mock out the HelloWorld method")
// 			},
// 			InitializeFunc: func() error {
// 				panic("mock out the Initialize method")
// 			},
// 			LogLevelFunc: func(next echo.HandlerFunc) echo.HandlerFunc {
// 				panic("mock out the LogLevel method")
// 			},
// 			MiddlewareFunc: func(handlerFunc echo.HandlerFunc) echo.HandlerFunc {
// 				panic("mock out the Middleware method")
// 			},
// 			PreGlobalMiddlewareFunc: func(handlerFunc echo.HandlerFunc) echo.HandlerFunc {
// 				panic("mock out the PreGlobalMiddleware method")
// 			},
// 			PreMiddlewareFunc: func(handlerFunc echo.HandlerFunc) echo.HandlerFunc {
// 				panic("mock out the PreMiddleware method")
// 			},
// 			SetEchoInstanceFunc: func(e *echo.Echo)  {
// 				panic("mock out the SetEchoInstance method")
// 			},
// 			ZapLoggerFunc: func(handlerFunc echo.HandlerFunc) echo.HandlerFunc {
// 				panic("mock out the ZapLogger method")
// 			},
// 		}
//
// 		// use mockedTestAPI in code that requires weoscontroller.TestAPI
// 		// and then make assertions.
//
// 	}
type TestAPIMock struct {
	// AddConfigFunc mocks the AddConfig method.
	AddConfigFunc func(config *weoscontroller.APIConfig) error

	// AddPathConfigFunc mocks the AddPathConfig method.
	AddPathConfigFunc func(path string, config *weoscontroller.PathConfig) error

	// ContextFunc mocks the Context method.
	ContextFunc func(handlerFunc echo.HandlerFunc) echo.HandlerFunc

	// EchoInstanceFunc mocks the EchoInstance method.
	EchoInstanceFunc func() *echo.Echo

	// FooBarFunc mocks the FooBar method.
	FooBarFunc func(c echo.Context) error

	// GlobalMiddlewareFunc mocks the GlobalMiddleware method.
	GlobalMiddlewareFunc func(handlerFunc echo.HandlerFunc) echo.HandlerFunc

	// HelloWorldFunc mocks the HelloWorld method.
	HelloWorldFunc func(c echo.Context) error

	// InitializeFunc mocks the Initialize method.
	InitializeFunc func() error

	// LogLevelFunc mocks the LogLevel method.
	LogLevelFunc func(next echo.HandlerFunc) echo.HandlerFunc

	// MiddlewareFunc mocks the Middleware method.
	MiddlewareFunc func(handlerFunc echo.HandlerFunc) echo.HandlerFunc

	// PreGlobalMiddlewareFunc mocks the PreGlobalMiddleware method.
	PreGlobalMiddlewareFunc func(handlerFunc echo.HandlerFunc) echo.HandlerFunc

	// PreMiddlewareFunc mocks the PreMiddleware method.
	PreMiddlewareFunc func(handlerFunc echo.HandlerFunc) echo.HandlerFunc

	// SetEchoInstanceFunc mocks the SetEchoInstance method.
	SetEchoInstanceFunc func(e *echo.Echo)

	// ZapLoggerFunc mocks the ZapLogger method.
	ZapLoggerFunc func(handlerFunc echo.HandlerFunc) echo.HandlerFunc

	// calls tracks calls to the methods.
	calls struct {
		// AddConfig holds details about calls to the AddConfig method.
		AddConfig []struct {
			// Config is the config argument value.
			Config *weoscontroller.APIConfig
		}
		// AddPathConfig holds details about calls to the AddPathConfig method.
		AddPathConfig []struct {
			// Path is the path argument value.
			Path string
			// Config is the config argument value.
			Config *weoscontroller.PathConfig
		}
		// Context holds details about calls to the Context method.
		Context []struct {
			// HandlerFunc is the handlerFunc argument value.
			HandlerFunc echo.HandlerFunc
		}
		// EchoInstance holds details about calls to the EchoInstance method.
		EchoInstance []struct {
		}
		// FooBar holds details about calls to the FooBar method.
		FooBar []struct {
			// C is the c argument value.
			C echo.Context
		}
		// GlobalMiddleware holds details about calls to the GlobalMiddleware method.
		GlobalMiddleware []struct {
			// HandlerFunc is the handlerFunc argument value.
			HandlerFunc echo.HandlerFunc
		}
		// HelloWorld holds details about calls to the HelloWorld method.
		HelloWorld []struct {
			// C is the c argument value.
			C echo.Context
		}
		// Initialize holds details about calls to the Initialize method.
		Initialize []struct {
		}
		// LogLevel holds details about calls to the LogLevel method.
		LogLevel []struct {
			// Next is the next argument value.
			Next echo.HandlerFunc
		}
		// Middleware holds details about calls to the Middleware method.
		Middleware []struct {
			// HandlerFunc is the handlerFunc argument value.
			HandlerFunc echo.HandlerFunc
		}
		// PreGlobalMiddleware holds details about calls to the PreGlobalMiddleware method.
		PreGlobalMiddleware []struct {
			// HandlerFunc is the handlerFunc argument value.
			HandlerFunc echo.HandlerFunc
		}
		// PreMiddleware holds details about calls to the PreMiddleware method.
		PreMiddleware []struct {
			// HandlerFunc is the handlerFunc argument value.
			HandlerFunc echo.HandlerFunc
		}
		// SetEchoInstance holds details about calls to the SetEchoInstance method.
		SetEchoInstance []struct {
			// E is the e argument value.
			E *echo.Echo
		}
		// ZapLogger holds details about calls to the ZapLogger method.
		ZapLogger []struct {
			// HandlerFunc is the handlerFunc argument value.
			HandlerFunc echo.HandlerFunc
		}
	}
	lockAddConfig           sync.RWMutex
	lockAddPathConfig       sync.RWMutex
	lockContext             sync.RWMutex
	lockEchoInstance        sync.RWMutex
	lockFooBar              sync.RWMutex
	lockGlobalMiddleware    sync.RWMutex
	lockHelloWorld          sync.RWMutex
	lockInitialize          sync.RWMutex
	lockLogLevel            sync.RWMutex
	lockMiddleware          sync.RWMutex
	lockPreGlobalMiddleware sync.RWMutex
	lockPreMiddleware       sync.RWMutex
	lockSetEchoInstance     sync.RWMutex
	lockZapLogger           sync.RWMutex
}

// AddConfig calls AddConfigFunc.
func (mock *TestAPIMock) AddConfig(config *weoscontroller.APIConfig) error {
	if mock.AddConfigFunc == nil {
		panic("TestAPIMock.AddConfigFunc: method is nil but TestAPI.AddConfig was just called")
	}
	callInfo := struct {
		Config *weoscontroller.APIConfig
	}{
		Config: config,
	}
	mock.lockAddConfig.Lock()
	mock.calls.AddConfig = append(mock.calls.AddConfig, callInfo)
	mock.lockAddConfig.Unlock()
	return mock.AddConfigFunc(config)
}

// AddConfigCalls gets all the calls that were made to AddConfig.
// Check the length with:
//     len(mockedTestAPI.AddConfigCalls())
func (mock *TestAPIMock) AddConfigCalls() []struct {
	Config *weoscontroller.APIConfig
} {
	var calls []struct {
		Config *weoscontroller.APIConfig
	}
	mock.lockAddConfig.RLock()
	calls = mock.calls.AddConfig
	mock.lockAddConfig.RUnlock()
	return calls
}

// AddPathConfig calls AddPathConfigFunc.
func (mock *TestAPIMock) AddPathConfig(path string, config *weoscontroller.PathConfig) error {
	if mock.AddPathConfigFunc == nil {
		panic("TestAPIMock.AddPathConfigFunc: method is nil but TestAPI.AddPathConfig was just called")
	}
	callInfo := struct {
		Path   string
		Config *weoscontroller.PathConfig
	}{
		Path:   path,
		Config: config,
	}
	mock.lockAddPathConfig.Lock()
	mock.calls.AddPathConfig = append(mock.calls.AddPathConfig, callInfo)
	mock.lockAddPathConfig.Unlock()
	return mock.AddPathConfigFunc(path, config)
}

// AddPathConfigCalls gets all the calls that were made to AddPathConfig.
// Check the length with:
//     len(mockedTestAPI.AddPathConfigCalls())
func (mock *TestAPIMock) AddPathConfigCalls() []struct {
	Path   string
	Config *weoscontroller.PathConfig
} {
	var calls []struct {
		Path   string
		Config *weoscontroller.PathConfig
	}
	mock.lockAddPathConfig.RLock()
	calls = mock.calls.AddPathConfig
	mock.lockAddPathConfig.RUnlock()
	return calls
}

// Context calls ContextFunc.
func (mock *TestAPIMock) Context(handlerFunc echo.HandlerFunc) echo.HandlerFunc {
	if mock.ContextFunc == nil {
		panic("TestAPIMock.ContextFunc: method is nil but TestAPI.Context was just called")
	}
	callInfo := struct {
		HandlerFunc echo.HandlerFunc
	}{
		HandlerFunc: handlerFunc,
	}
	mock.lockContext.Lock()
	mock.calls.Context = append(mock.calls.Context, callInfo)
	mock.lockContext.Unlock()
	return mock.ContextFunc(handlerFunc)
}

// ContextCalls gets all the calls that were made to Context.
// Check the length with:
//     len(mockedTestAPI.ContextCalls())
func (mock *TestAPIMock) ContextCalls() []struct {
	HandlerFunc echo.HandlerFunc
} {
	var calls []struct {
		HandlerFunc echo.HandlerFunc
	}
	mock.lockContext.RLock()
	calls = mock.calls.Context
	mock.lockContext.RUnlock()
	return calls
}

// EchoInstance calls EchoInstanceFunc.
func (mock *TestAPIMock) EchoInstance() *echo.Echo {
	if mock.EchoInstanceFunc == nil {
		panic("TestAPIMock.EchoInstanceFunc: method is nil but TestAPI.EchoInstance was just called")
	}
	callInfo := struct {
	}{}
	mock.lockEchoInstance.Lock()
	mock.calls.EchoInstance = append(mock.calls.EchoInstance, callInfo)
	mock.lockEchoInstance.Unlock()
	return mock.EchoInstanceFunc()
}

// EchoInstanceCalls gets all the calls that were made to EchoInstance.
// Check the length with:
//     len(mockedTestAPI.EchoInstanceCalls())
func (mock *TestAPIMock) EchoInstanceCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockEchoInstance.RLock()
	calls = mock.calls.EchoInstance
	mock.lockEchoInstance.RUnlock()
	return calls
}

// FooBar calls FooBarFunc.
func (mock *TestAPIMock) FooBar(c echo.Context) error {
	if mock.FooBarFunc == nil {
		panic("TestAPIMock.FooBarFunc: method is nil but TestAPI.FooBar was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockFooBar.Lock()
	mock.calls.FooBar = append(mock.calls.FooBar, callInfo)
	mock.lockFooBar.Unlock()
	return mock.FooBarFunc(c)
}

// FooBarCalls gets all the calls that were made to FooBar.
// Check the length with:
//     len(mockedTestAPI.FooBarCalls())
func (mock *TestAPIMock) FooBarCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockFooBar.RLock()
	calls = mock.calls.FooBar
	mock.lockFooBar.RUnlock()
	return calls
}

// GlobalMiddleware calls GlobalMiddlewareFunc.
func (mock *TestAPIMock) GlobalMiddleware(handlerFunc echo.HandlerFunc) echo.HandlerFunc {
	if mock.GlobalMiddlewareFunc == nil {
		panic("TestAPIMock.GlobalMiddlewareFunc: method is nil but TestAPI.GlobalMiddleware was just called")
	}
	callInfo := struct {
		HandlerFunc echo.HandlerFunc
	}{
		HandlerFunc: handlerFunc,
	}
	mock.lockGlobalMiddleware.Lock()
	mock.calls.GlobalMiddleware = append(mock.calls.GlobalMiddleware, callInfo)
	mock.lockGlobalMiddleware.Unlock()
	return mock.GlobalMiddlewareFunc(handlerFunc)
}

// GlobalMiddlewareCalls gets all the calls that were made to GlobalMiddleware.
// Check the length with:
//     len(mockedTestAPI.GlobalMiddlewareCalls())
func (mock *TestAPIMock) GlobalMiddlewareCalls() []struct {
	HandlerFunc echo.HandlerFunc
} {
	var calls []struct {
		HandlerFunc echo.HandlerFunc
	}
	mock.lockGlobalMiddleware.RLock()
	calls = mock.calls.GlobalMiddleware
	mock.lockGlobalMiddleware.RUnlock()
	return calls
}

// HelloWorld calls HelloWorldFunc.
func (mock *TestAPIMock) HelloWorld(c echo.Context) error {
	if mock.HelloWorldFunc == nil {
		panic("TestAPIMock.HelloWorldFunc: method is nil but TestAPI.HelloWorld was just called")
	}
	callInfo := struct {
		C echo.Context
	}{
		C: c,
	}
	mock.lockHelloWorld.Lock()
	mock.calls.HelloWorld = append(mock.calls.HelloWorld, callInfo)
	mock.lockHelloWorld.Unlock()
	return mock.HelloWorldFunc(c)
}

// HelloWorldCalls gets all the calls that were made to HelloWorld.
// Check the length with:
//     len(mockedTestAPI.HelloWorldCalls())
func (mock *TestAPIMock) HelloWorldCalls() []struct {
	C echo.Context
} {
	var calls []struct {
		C echo.Context
	}
	mock.lockHelloWorld.RLock()
	calls = mock.calls.HelloWorld
	mock.lockHelloWorld.RUnlock()
	return calls
}

// Initialize calls InitializeFunc.
func (mock *TestAPIMock) Initialize() error {
	if mock.InitializeFunc == nil {
		panic("TestAPIMock.InitializeFunc: method is nil but TestAPI.Initialize was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInitialize.Lock()
	mock.calls.Initialize = append(mock.calls.Initialize, callInfo)
	mock.lockInitialize.Unlock()
	return mock.InitializeFunc()
}

// InitializeCalls gets all the calls that were made to Initialize.
// Check the length with:
//     len(mockedTestAPI.InitializeCalls())
func (mock *TestAPIMock) InitializeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInitialize.RLock()
	calls = mock.calls.Initialize
	mock.lockInitialize.RUnlock()
	return calls
}

// LogLevel calls LogLevelFunc.
func (mock *TestAPIMock) LogLevel(next echo.HandlerFunc) echo.HandlerFunc {
	if mock.LogLevelFunc == nil {
		panic("TestAPIMock.LogLevelFunc: method is nil but TestAPI.LogLevel was just called")
	}
	callInfo := struct {
		Next echo.HandlerFunc
	}{
		Next: next,
	}
	mock.lockLogLevel.Lock()
	mock.calls.LogLevel = append(mock.calls.LogLevel, callInfo)
	mock.lockLogLevel.Unlock()
	return mock.LogLevelFunc(next)
}

// LogLevelCalls gets all the calls that were made to LogLevel.
// Check the length with:
//     len(mockedTestAPI.LogLevelCalls())
func (mock *TestAPIMock) LogLevelCalls() []struct {
	Next echo.HandlerFunc
} {
	var calls []struct {
		Next echo.HandlerFunc
	}
	mock.lockLogLevel.RLock()
	calls = mock.calls.LogLevel
	mock.lockLogLevel.RUnlock()
	return calls
}

// Middleware calls MiddlewareFunc.
func (mock *TestAPIMock) Middleware(handlerFunc echo.HandlerFunc) echo.HandlerFunc {
	if mock.MiddlewareFunc == nil {
		panic("TestAPIMock.MiddlewareFunc: method is nil but TestAPI.Middleware was just called")
	}
	callInfo := struct {
		HandlerFunc echo.HandlerFunc
	}{
		HandlerFunc: handlerFunc,
	}
	mock.lockMiddleware.Lock()
	mock.calls.Middleware = append(mock.calls.Middleware, callInfo)
	mock.lockMiddleware.Unlock()
	return mock.MiddlewareFunc(handlerFunc)
}

// MiddlewareCalls gets all the calls that were made to Middleware.
// Check the length with:
//     len(mockedTestAPI.MiddlewareCalls())
func (mock *TestAPIMock) MiddlewareCalls() []struct {
	HandlerFunc echo.HandlerFunc
} {
	var calls []struct {
		HandlerFunc echo.HandlerFunc
	}
	mock.lockMiddleware.RLock()
	calls = mock.calls.Middleware
	mock.lockMiddleware.RUnlock()
	return calls
}

// PreGlobalMiddleware calls PreGlobalMiddlewareFunc.
func (mock *TestAPIMock) PreGlobalMiddleware(handlerFunc echo.HandlerFunc) echo.HandlerFunc {
	if mock.PreGlobalMiddlewareFunc == nil {
		panic("TestAPIMock.PreGlobalMiddlewareFunc: method is nil but TestAPI.PreGlobalMiddleware was just called")
	}
	callInfo := struct {
		HandlerFunc echo.HandlerFunc
	}{
		HandlerFunc: handlerFunc,
	}
	mock.lockPreGlobalMiddleware.Lock()
	mock.calls.PreGlobalMiddleware = append(mock.calls.PreGlobalMiddleware, callInfo)
	mock.lockPreGlobalMiddleware.Unlock()
	return mock.PreGlobalMiddlewareFunc(handlerFunc)
}

// PreGlobalMiddlewareCalls gets all the calls that were made to PreGlobalMiddleware.
// Check the length with:
//     len(mockedTestAPI.PreGlobalMiddlewareCalls())
func (mock *TestAPIMock) PreGlobalMiddlewareCalls() []struct {
	HandlerFunc echo.HandlerFunc
} {
	var calls []struct {
		HandlerFunc echo.HandlerFunc
	}
	mock.lockPreGlobalMiddleware.RLock()
	calls = mock.calls.PreGlobalMiddleware
	mock.lockPreGlobalMiddleware.RUnlock()
	return calls
}

// PreMiddleware calls PreMiddlewareFunc.
func (mock *TestAPIMock) PreMiddleware(handlerFunc echo.HandlerFunc) echo.HandlerFunc {
	if mock.PreMiddlewareFunc == nil {
		panic("TestAPIMock.PreMiddlewareFunc: method is nil but TestAPI.PreMiddleware was just called")
	}
	callInfo := struct {
		HandlerFunc echo.HandlerFunc
	}{
		HandlerFunc: handlerFunc,
	}
	mock.lockPreMiddleware.Lock()
	mock.calls.PreMiddleware = append(mock.calls.PreMiddleware, callInfo)
	mock.lockPreMiddleware.Unlock()
	return mock.PreMiddlewareFunc(handlerFunc)
}

// PreMiddlewareCalls gets all the calls that were made to PreMiddleware.
// Check the length with:
//     len(mockedTestAPI.PreMiddlewareCalls())
func (mock *TestAPIMock) PreMiddlewareCalls() []struct {
	HandlerFunc echo.HandlerFunc
} {
	var calls []struct {
		HandlerFunc echo.HandlerFunc
	}
	mock.lockPreMiddleware.RLock()
	calls = mock.calls.PreMiddleware
	mock.lockPreMiddleware.RUnlock()
	return calls
}

// SetEchoInstance calls SetEchoInstanceFunc.
func (mock *TestAPIMock) SetEchoInstance(e *echo.Echo) {
	if mock.SetEchoInstanceFunc == nil {
		panic("TestAPIMock.SetEchoInstanceFunc: method is nil but TestAPI.SetEchoInstance was just called")
	}
	callInfo := struct {
		E *echo.Echo
	}{
		E: e,
	}
	mock.lockSetEchoInstance.Lock()
	mock.calls.SetEchoInstance = append(mock.calls.SetEchoInstance, callInfo)
	mock.lockSetEchoInstance.Unlock()
	mock.SetEchoInstanceFunc(e)
}

// SetEchoInstanceCalls gets all the calls that were made to SetEchoInstance.
// Check the length with:
//     len(mockedTestAPI.SetEchoInstanceCalls())
func (mock *TestAPIMock) SetEchoInstanceCalls() []struct {
	E *echo.Echo
} {
	var calls []struct {
		E *echo.Echo
	}
	mock.lockSetEchoInstance.RLock()
	calls = mock.calls.SetEchoInstance
	mock.lockSetEchoInstance.RUnlock()
	return calls
}

// ZapLogger calls ZapLoggerFunc.
func (mock *TestAPIMock) ZapLogger(handlerFunc echo.HandlerFunc) echo.HandlerFunc {
	if mock.ZapLoggerFunc == nil {
		panic("TestAPIMock.ZapLoggerFunc: method is nil but TestAPI.ZapLogger was just called")
	}
	callInfo := struct {
		HandlerFunc echo.HandlerFunc
	}{
		HandlerFunc: handlerFunc,
	}
	mock.lockZapLogger.Lock()
	mock.calls.ZapLogger = append(mock.calls.ZapLogger, callInfo)
	mock.lockZapLogger.Unlock()
	return mock.ZapLoggerFunc(handlerFunc)
}

// ZapLoggerCalls gets all the calls that were made to ZapLogger.
// Check the length with:
//     len(mockedTestAPI.ZapLoggerCalls())
func (mock *TestAPIMock) ZapLoggerCalls() []struct {
	HandlerFunc echo.HandlerFunc
} {
	var calls []struct {
		HandlerFunc echo.HandlerFunc
	}
	mock.lockZapLogger.RLock()
	calls = mock.calls.ZapLogger
	mock.lockZapLogger.RUnlock()
	return calls
}
