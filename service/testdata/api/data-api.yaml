openapi: 3.0.2
info:
  title: Data Service
  version: 1.0.0
  description: Api for WeOS Data Service
paths:
  /databases:
    summary: Path used to manage the list of databases.
    description: >-
      The REST endpoint/path used to list and create zero or more `Database` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      operationId: getDatabases
      summary: List All databases
      description: Gets a list of all `Database` entities.
      parameters:
        - name: page
          description: current page in the list
          schema:
            type: integer
          in: query

        - name: limit
          description: the no. of items to return
          schema:
            type: integer
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseResult'
          description: Successful response - returns an array of `Database` entities.
          links:
            getNextPage:
              operationId: getDatabases
              parameters:
                page: '$response.body#/meta.page'
                limit: '$response.body#/meta.limit'

    post:
      requestBody:
        description: A new `Database` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Database'
        required: true
      responses:
        '201':
          description: Successful response.
          headers:
            ETag:
              schema:
                type: integer
              description: The sequence no. of the entry for this item.
          links:
            self:
              operationId: getDatabase
              parameters:
                databaseId: '$response.body#/id'

      operationId: createDatabase
      summary: Create a Database
      description: Creates a new instance of a `Database`.


  '/databases/{databaseId}':
    summary: Path used to manage a single Database.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of an `Database`.  This
      path contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete
      tasks, respectively.
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Database'
          description: Successful response - returns a single `Database`.
          links:
            self:
              operationId: getTables
              parameters:
                databaseId: '$response.body#/id'
      operationId: getDatabase
      summary: Get a Database
      description: Gets the details of a single instance of a `Database`.
    put:
      requestBody:
        description: Updated `Database` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Database'
        required: true
      responses:
        '202':
          description: Successful response.
          headers:
            ETag:
              schema:
                type: integer
              description: The sequence no. of the entry for this item.
      operationId: updateDatabase
      summary: Update a Database
      description: Updates an existing `Database`.
    delete:
      responses:
        '204':
          description: Successful response.
      operationId: deleteDatabase
      summary: Delete a Database
      description: Deletes an existing `Database`.
    parameters:
      -
        name: databaseId
        description: A unique identifier for a `Database`.
        schema:
          type: string
        in: path
        required: true
  /tables:
    summary: Path used to manage the list of tables.
    description: >-
      The REST endpoint/path used to list and create zero or more `Table` entities.  This path contains
      a `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      parameters:
        - name: databaseId
          description: the database
          schema:
            type: string
          in: query
        - name: page
          description: current page in the list
          schema:
            type: integer
          in: query

        - name: limit
          description: the no. of items to return
          schema:
            type: integer
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableResult'
          description: Successful response - returns an array of `Table` entities.
          links:
            getNextPage:
              operationId: getTables
              parameters:
                page: '$response.body#/meta.page'
                limit: '$response.body#/meta.limit'
      operationId: getTables
      summary: List All tables
      description: Gets a list of all `Table` entities.

    post:
      requestBody:
        description: A new `Table` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
        required: true
      responses:
        '201':
          description: Successful response.
      operationId: createTable
      summary: Create a Table
      description: Creates a new instance of a `Table`.
  '/tables/{tableId}':
    summary: Path used to manage a single Table.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of an `Table`.  This path
      contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks,
      respectively.
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
          description: Successful response - returns a single `Table`.
      operationId: getTable
      summary: Get a Table
      description: Gets the details of a single instance of a `Table`.
    put:
      requestBody:
        description: Updated `Table` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Table'
        required: true
      responses:
        '202':
          description: Successful response.
      operationId: updateTable
      summary: Update a Table
      description: Updates an existing `Table`.
    delete:
      responses:
        '204':
          description: Successful response.
      operationId: deleteTable
      summary: Delete a Table
      description: Deletes an existing `Table`.
    parameters:
      -
        name: tableId
        description: A unique identifier for a `Table`.
        schema:
          type: string
        in: path
        required: true
  /query:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
          description: Query result with paging info in the meta field
    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GraphQLQuery'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueryResult'
          description: Valid Result
      description: This is intended for getting data using graphql
    parameters:
      -
        name: columns
        description: list of columns to return in the result
        schema:
          type: array
          items:
            type: string
        in: query
      -
        examples:
          basic:
            value: 'firstName:%akeem'
        name: conditions
        description: Condition clauses
        schema:
          type: array
          items:
            type: string
        in: query
      -
        examples:
          basic:
            value: 'firstName:desc'
        name: sort
        description: Sort clauses
        schema:
          type: array
          items:
            type: string
        in: query
  /items:
    summary: Path used to manage the list of inserts.
    description: >-
      The REST endpoint/path used to list and create zero or more `Item` entities.  This path containsa
      `PUT` operation to perform the list and create tasks, respectively.
    put:
      requestBody:
        description: A new `Item` to be created.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Item'
        required: true
      responses:
        '201':
          description: Successful response.
      operationId: createItems
      summary: Add Items
      description: >-
        Add items to the system. PUT is used because the item must have a uuid generated by the
        application
  '/items/{insertId}':
    summary: Path used to manage a single Insert.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of an `Items`.  This path
      contains `GET`, `PATCH`, and `DELETE` operations used to perform the get, update, and delete
      tasks, respectively.
    get:
      parameters:
        -
          name: v
          description: The revision id of the item to retreive
          schema:
            type: string
          in: query
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
          description: Successful response - returns a single `Insert`.
      operationId: getInsert
      summary: Get a Insert
      description: Gets the details of a single instance of a `Insert`.
    delete:
      responses:
        '204':
          description: Successful response.
      operationId: deleteInsert
      summary: Delete a Insert
      description: Deletes an existing `Insert`.
    patch:
      requestBody:
        description: Updated `Item` details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        '202':
          description: Successful response.
      operationId: updateInsert
      summary: Update a Insert
      description: Updates an existing `Insert`.
    parameters:
      -
        name: insertId
        description: A unique identifier for a `Insert`.
        schema:
          type: string
        in: path
        required: true
components:
  schemas:
    Database:
      title: Root Type for Database
      description: WeOS Database
      type: object
      properties:
        id:
          type: string
        wern:
          type: string
        title:
          type: string
        description:
          type: string
        active:
          type: boolean
        creatorId:
          type: string
        createdDate:
          format: date-time
          type: string
        modifiedDate:
          format: date-time
          type: string
      required:
        - id
        - title
      example:
        id: 35a54035-753d-4123-bea2-ff3ee25b0eea
        wern: 'weos:tt:data:12345:35a54035-753d-4123-bea2-ff3ee25b0eea'
        title: general
        description: The default database for the account
        active: true
        creatorId: d4b7df67-7391-4869-9ba1-0f2952665baf
        createdDate: '2020-01-22 19:10:25-07'
        modifiedDate: '2020-01-22 19:10:25-07'
        links:
          - rel: self
            href: /databases/35a54035-753d-4123-bea2-ff3ee25b0eea
          - rel: tables
            href: /tables/?databaseId=35a54035-753d-4123-bea2-ff3ee25b0eea
    Table:
      title: Root Type for Table
      description: 'WeOS Table '
      type: object
      properties:
        id:
          type: string
        wern:
          type: string
        databaseId:
          type: string
        title:
          type: string
        description:
          type: string
        active:
          type: boolean
        creator_id:
          type: string
        creator_date:
          format: date-time
          type: string
        modified_date:
          format: date-time
          type: string
        columns:
          description: ''
          type: array
          items:
            $ref: '#/components/schemas/Column'
      example:
        id: 7ffc4503-6c41-46e8-ac89-4ed3fef200bf
        wern: 'weos:tt:data:12345:35a54035-753d-4123-bea2-ff3ee25b0eea'
        databaseId: 35a54035-753d-4123-bea2-ff3ee25b0eea
        title: employees
        description: employees table
        active: true
        creator_id: d4b7df67-7391-4869-9ba1-0f2952665baf
        creator_date: '2020-01-22 19:10:25-07'
        modified_date: '2020-01-22 19:10:25-07'
        links:
          - rel: self
            href: /tables/?databaseId=35a54035-753d-4123-bea2-ff3ee25b0eea
        columns:
          -
            id: 3d18e41a-a481-4525-93dd-7bc00db9b61d
            table: 35a54035-753d-4123-bea2-ff3ee25b0eea
            title: firstName
            description: Lorem Ipsum
            columnType: string
            default: ''
            formula: ''
            format: ''
            createdDate: '2020-01-22 19:10:25-07'
            modifiedDate: '2020-01-22 19:10:25-07'
    Column:
      title: Root Type for Column
      description: Table column
      type: object
      properties:
        id:
          type: string
        table:
          type: string
        title:
          type: string
        description:
          type: string
        columnType:
          type: string
        default:
          type: string
        formula:
          type: string
        format:
          type: string
        createdDate:
          format: date-time
          type: string
        modifiedDate:
          format: date-time
          type: string
      example:
        id: 3d18e41a-a481-4525-93dd-7bc00db9b61d
        table: 35a54035-753d-4123-bea2-ff3ee25b0eea
        title: firstName
        description: Lorem Ipsum
        columnType: string
        default: ''
        formula: ''
        format: ''
        createdDate: '2020-01-22 19:10:25-07'
        modifiedDate: '2020-01-22 19:10:25-07'
    PagedResult:
      title: Root Type for all results
      description: The envelope for list results
      type: object
      properties:
        meta:
          type: object
          properties:
            total:
              format: int32
              type: integer
            currentPage:
              format: int32
              type: integer
            limit:
              format: int32
              type: integer
    QueryResult:
      allOf:
        - $ref: '#/components/schemas/PagedResult'
        - title: Query Results
        - description: The results of a query
        - type: object
          properties:
            data:
              type: array
              items:
                type: object
          example:
            meta:
              total: 1
              currentPage: 1
              limit: 1
            data:
              -
                firstName: John
                lastName: Doe
    DatabaseResult:
      allOf:
        - $ref: '#/components/schemas/PagedResult'
        - title: Database Results
        - description: The results of database list
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Database'
            links:
              type: array
              items:
                $ref: '#/components/schemas/Link'
              example:
                -
                  rel: next
                  href: /databases/35a54035-753d-4123-bea2-ff3ee25b0eea?page=2&limit=10

    TableResult:
      allOf:
        - $ref: '#/components/schemas/PagedResult'
        - title: Table List Results
        - description: The results of tables list
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Table'
            links:
              type: array
              items:
                $ref: '#/components/schemas/Link'
              example:
                - rel: next
                  href: /tables/35a54035-753d-4123-bea2-ff3ee25b0eea?page=2&limit=10

    Link:
      properties:
        rel:
          type: string
        href:
          type: string
    Item:
      title: Root Type for Insert
      description: Request to insert data
      required:
        - id
      type: object
      properties:
        table:
          type: string
        created:
          format: date-time
          type: string
        data:
          type: array
          items: {}
        id:
          description: UUID for the item generated by the application
          type: string
      example:
        table: 7ffc4503-6c41-46e8-ac89-4ed3fef200bf
        created: '2020-01-22 19:10:25-07'
        data:
          firstName: John
          lastName: Doe
    GraphQLQuery:
      title: Root Type for GraphQLQuery
      description: Query to be used to make grapql queries
      type: object
      properties:
        operationName:
          type: string
        variables:
          type: object
        query:
          type: string
      example:
        variables: {}
        query: |
          {
            allPersons {
              name
              films {
                director
              }
            }
          }
