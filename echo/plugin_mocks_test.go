// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package echo_test

import (
	"github.com/wepala/weos-controller/core"
	"github.com/wepala/weos/module"
	"sync"
)

var (
	lockPluginInterfaceMockAddConfig   sync.RWMutex
	lockPluginInterfaceMockInitModules sync.RWMutex
)

// Ensure, that PluginInterfaceMock does implement core.PluginInterface.
// If this is not the case, regenerate this file with moq.
var _ core.PluginInterface = &PluginInterfaceMock{}

// PluginInterfaceMock is a mock implementation of core.PluginInterface.
//
//     func TestSomethingThatUsesPluginInterface(t *testing.T) {
//
//         // make and configure a mocked core.PluginInterface
//         mockedPluginInterface := &PluginInterfaceMock{
//             AddConfigFunc: func(config *core.APIConfig) error {
// 	               panic("mock out the AddConfig method")
//             },
//             InitModulesFunc: func(mod *module.WeOSMod)  {
// 	               panic("mock out the InitModules method")
//             },
//         }
//
//         // use mockedPluginInterface in code that requires core.PluginInterface
//         // and then make assertions.
//
//     }
type PluginInterfaceMock struct {
	// AddConfigFunc mocks the AddConfig method.
	AddConfigFunc func(config *core.APIConfig) error

	// InitModulesFunc mocks the InitModules method.
	InitModulesFunc func(mod *module.WeOSMod)

	// calls tracks calls to the methods.
	calls struct {
		// AddConfig holds details about calls to the AddConfig method.
		AddConfig []struct {
			// Config is the config argument value.
			Config *core.APIConfig
		}
		// InitModules holds details about calls to the InitModules method.
		InitModules []struct {
			// Mod is the mod argument value.
			Mod *module.WeOSMod
		}
	}
}

// AddConfig calls AddConfigFunc.
func (mock *PluginInterfaceMock) AddConfig(config *core.APIConfig) error {
	if mock.AddConfigFunc == nil {
		panic("PluginInterfaceMock.AddConfigFunc: method is nil but PluginInterface.AddConfig was just called")
	}
	callInfo := struct {
		Config *core.APIConfig
	}{
		Config: config,
	}
	lockPluginInterfaceMockAddConfig.Lock()
	mock.calls.AddConfig = append(mock.calls.AddConfig, callInfo)
	lockPluginInterfaceMockAddConfig.Unlock()
	return mock.AddConfigFunc(config)
}

// AddConfigCalls gets all the calls that were made to AddConfig.
// Check the length with:
//     len(mockedPluginInterface.AddConfigCalls())
func (mock *PluginInterfaceMock) AddConfigCalls() []struct {
	Config *core.APIConfig
} {
	var calls []struct {
		Config *core.APIConfig
	}
	lockPluginInterfaceMockAddConfig.RLock()
	calls = mock.calls.AddConfig
	lockPluginInterfaceMockAddConfig.RUnlock()
	return calls
}

// InitModules calls InitModulesFunc.
func (mock *PluginInterfaceMock) InitModules(mod *module.WeOSMod) {
	if mock.InitModulesFunc == nil {
		panic("PluginInterfaceMock.InitModulesFunc: method is nil but PluginInterface.InitModules was just called")
	}
	callInfo := struct {
		Mod *module.WeOSMod
	}{
		Mod: mod,
	}
	lockPluginInterfaceMockInitModules.Lock()
	mock.calls.InitModules = append(mock.calls.InitModules, callInfo)
	lockPluginInterfaceMockInitModules.Unlock()
	mock.InitModulesFunc(mod)
}

// InitModulesCalls gets all the calls that were made to InitModules.
// Check the length with:
//     len(mockedPluginInterface.InitModulesCalls())
func (mock *PluginInterfaceMock) InitModulesCalls() []struct {
	Mod *module.WeOSMod
} {
	var calls []struct {
		Mod *module.WeOSMod
	}
	lockPluginInterfaceMockInitModules.RLock()
	calls = mock.calls.InitModules
	lockPluginInterfaceMockInitModules.RUnlock()
	return calls
}
